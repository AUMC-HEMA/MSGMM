// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getClusters
arma::vec getClusters(arma::mat X, arma::vec weights, arma::mat Mean, arma::mat Sigma);
RcppExport SEXP _MSGMM_getClusters(SEXP XSEXP, SEXP weightsSEXP, SEXP MeanSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(getClusters(X, weights, Mean, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// getLoglike
double getLoglike(arma::mat X, arma::vec weights, arma::mat Mean, arma::mat Sigma);
RcppExport SEXP _MSGMM_getLoglike(SEXP XSEXP, SEXP weightsSEXP, SEXP MeanSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(getLoglike(X, weights, Mean, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// getLoglikeVals
arma::vec getLoglikeVals(arma::mat X, arma::vec weights, arma::mat Mean, arma::mat Sigma);
RcppExport SEXP _MSGMM_getLoglikeVals(SEXP XSEXP, SEXP weightsSEXP, SEXP MeanSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(getLoglikeVals(X, weights, Mean, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// logstep
double logstep(arma::mat X, arma::vec weights, arma::mat Mean, arma::mat Sigma, arma::vec& A0, arma::mat& A1, arma::mat& A2);
RcppExport SEXP _MSGMM_logstep(SEXP XSEXP, SEXP weightsSEXP, SEXP MeanSEXP, SEXP SigmaSEXP, SEXP A0SEXP, SEXP A1SEXP, SEXP A2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type A2(A2SEXP);
    rcpp_result_gen = Rcpp::wrap(logstep(X, weights, Mean, Sigma, A0, A1, A2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MSGMM_getClusters", (DL_FUNC) &_MSGMM_getClusters, 4},
    {"_MSGMM_getLoglike", (DL_FUNC) &_MSGMM_getLoglike, 4},
    {"_MSGMM_getLoglikeVals", (DL_FUNC) &_MSGMM_getLoglikeVals, 4},
    {"_MSGMM_logstep", (DL_FUNC) &_MSGMM_logstep, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_MSGMM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
